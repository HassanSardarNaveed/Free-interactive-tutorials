Abstraction means the ability to make a class abstract in OOP. 
An abstract class is one that cannot be instantiated. 
All other functionality of the class still exists, and its fields, methods, and constructors are all accessed 
in the same manner. But cannot create an instance of the abstract class.


Example:

/* File name : Employee.java */
public abstract class Employee
{
   private String name;
   private String address;
   private int number;
   public Employee(String name, String address, int number)
   {
      System.out.println("Constructing an Employee");
      this.name = name;
      this.address = address;
      this.number = number;
   }
   public double computePay()
   {
     System.out.println("Inside Employee computePay");
     return 0.0;
   }
   public void mailCheck()
   {
      System.out.println("Mailing a check to " + this.name
       + " " + this.address);
   }
   public String getName()
   {
      return name;
   }
   public String getAddress()
   {
      return address;
   }
   public void setAddress(String newAddress)
   {
      address = newAddress;
   }
   public int getNumber()
   {
     return number;
   }
   public abstract logData();
}


The class is now abstract, but it still has three fields, few methods, and one constructor. The method logData is declared Abstract, which means that if the class Employee is extended, the extending class must create its own functionality for the logData method. This is a useful feature of OOP that enables one class to design a template for other classes that can implement their own functionality. The Employee class can't directly create object of its type. But can help an inherited class to create object. Thus the class's functionality totally abstracted from outside.

/* File name : Salary.java */
public class Salary extends Employee
{
   private double salary; //Annual salary
   public Salary(String name, String address, int number, double salary)
   {
       super(name, address, number);
       setSalary(salary);
   }
   public void mailCheck()
   {
       System.out.println("Within mailCheck of Salary class ");
       System.out.println("Mailing check to " + getName() // call the Employee.getname()
       + " with salary " + salary);
   }
   public double getSalary()
   {
       return salary;
   }
   public void setSalary(double newSalary)
   {
       if(newSalary >= 0.0)
       {
          salary = newSalary;
       }
   }
   public double computePay()
   {
      System.out.println("Computing salary pay for " + getName());
      return salary/52;
   }
   public void logData() //Difining abstract method
   {
      System.out.println("Data: " + name + ", " + salary);
   }
}


Here, we cannot instantiate a new Employee, but if we instantiate a new Salary object, 
the Salary object will inherit the three fields and seven methods from Employee. We can then add more statements to the abstract method logData()

